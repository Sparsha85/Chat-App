{"version":3,"sources":["components/MessageForm.jsx","components/MyMessage.jsx","components/TheirMessage.jsx","components/ChatFeed.jsx","components/LoginForm.jsx","App.js","index.js"],"names":["MessageForm","props","useState","value","setValue","chatId","creds","handleSubmit","event","preventDefault","text","trim","length","sendMessage","className","onSubmit","placeholder","onChange","target","isTyping","htmlFor","PictureOutlined","type","multiple","id","style","display","files","SendOutlined","MyMessage","message","attachments","src","file","alt","float","marginRight","color","backgroundColor","TheirMessage","lastMessage","isFirstMessageByUser","sender","username","backgroundImage","avatar","marginLeft","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","renderMessages","keys","Object","key","lastMessageKey","width","title","height","LoginForm","setUsername","password","setPassword","error","setError","e","a","authObject","axios","get","headers","localStorage","setItem","window","location","reload","required","align","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.922e035e.chunk.js","sourcesContent":["import {useState} from 'react';\r\nimport { sendMessage, isTyping } from 'react-chat-engine';\r\nimport { SendOutlined, PictureOutlined } from '@ant-design/icons';\r\n\r\nconst MessageForm = (props) => {\r\n    const [value, setValue] = useState('');\r\n    const {chatId, creds} = props;\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const text = value.trim();\r\n\r\n        if(text.length > 0) sendMessage(creds, chatId, {text});\r\n        setValue('')\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value);\r\n\r\n        isTyping(props, chatId)\r\n    }\r\n\r\n    const handleUpload = (event) =>{\r\n        sendMessage(creds, chatId, {files: event.target.files, text: ''})\r\n    }\r\n    return(\r\n        <div>\r\n            <form className=\"message-form\" onSubmit={handleSubmit}>\r\n                <input\r\n                    className=\"message-input\"\r\n                    placeholder=\"Start Typing\"\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    onSubmit={handleSubmit}\r\n                />\r\n                <label htmlFor=\"upload-button\">\r\n                    <span className=\"image-button\">\r\n                        <PictureOutlined className=\"picture-icon\"/>\r\n                    </span>\r\n                </label>\r\n                <input \r\n                    type=\"file\"\r\n                    multiple={false}\r\n                    id=\"upload-button\"\r\n                    style={{display: 'none'}}\r\n                    onChange={handleUpload}\r\n                />\r\n                <button type=\"submit\" className=\"send-button\">\r\n                <SendOutlined className=\"send-icon\"/>\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MessageForm;","const MyMessage = ({message}) => {\r\n    if(message?.attachments?.length > 0){\r\n        return(\r\n            <img \r\n                src={message.attachments[0].file}\r\n                alt=\"message-attachment\"\r\n                className=\"message-image\"\r\n                style={{float: 'right'}}\r\n            />\r\n        )\r\n    }\r\n    return(\r\n        <div className=\"message\" style={{float: 'right', marginRight: '18px', color: 'white', backgroundColor: '#3B2A50' }}>\r\n            {message.text}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyMessage;","const TheirMessage = ({lastMessage, message}) => {\r\n    const isFirstMessageByUser = !lastMessage || lastMessage.sender.username != message.sender.username;\r\n    return(\r\n        <div className=\"messsage-row\">\r\n            {isFirstMessageByUser && (\r\n                <div \r\n                    className=\"message-avatar\"\r\n                    style={{backgroundImage: `url(${message?.sender?.avatar})`}}\r\n                    />\r\n            )}\r\n            {\r\n               message?.attachments?.length > 0\r\n                ? (\r\n                    <img \r\n                        src={message.attachments[0].file}\r\n                        alt=\"message-attachment\"\r\n                        className=\"message-image\"\r\n                        style={{marginLeft: isFirstMessageByUser ? '4px' : '48px'}}\r\n                    />\r\n                     ) : (\r\n                        <div className=\"message\" style={{float: 'left', backgroundColor: '#CABCDC',  marginLeft : isFirstMessageByUser ? '4px' : '48px'}}>\r\n                        {message.text}\r\n                        </div>\r\n                     )\r\n                }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TheirMessage;","import MessageForm from \"./MessageForm\";\r\nimport MyMessage from \"./MyMessage\";\r\nimport TheirMessage from \"./TheirMessage\";\r\n\r\nconst ChatFeed = (props) => {\r\n    const {chats, activeChat, userName, messages } = props;\r\n    const chat = chats && chats[activeChat];\r\n\r\n    const renderReadReceipts = (message, isMyMessage) => {\r\n        chat.people.map((person, index)=> person.last_read === message.id && (\r\n            <div\r\n            key={`read_${index}`}\r\n            className=\"read-receipt\"\r\n            style={{\r\n                float: isMyMessage ? 'right' : 'left',\r\n                backgroundImage: `url(${person?.person?.avatar})`\r\n            }}\r\n            />\r\n        ))\r\n    }\r\n    const renderMessages = () => {\r\n        const keys = Object.keys(messages);\r\n        return keys.map((key, index) => {\r\n            const message = messages[key];\r\n            const lastMessageKey = index === 0 ? null : keys[index-1];\r\n            const isMyMessage = userName === message.sender.username;\r\n\r\n            return (\r\n                <div key={`msg_${index}`} style={{width: '100%'}}>\r\n                    <div className=\"message-block\">\r\n                        {\r\n                            isMyMessage\r\n                            ? <MyMessage message={message}/>\r\n                            : <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />\r\n                        }\r\n                    </div>\r\n                        <div className=\"read-receipts\" style={{marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px'}}>\r\n                            {renderReadReceipts(message, isMyMessage)};\r\n                        </div>\r\n                </div>\r\n            );\r\n        })\r\n    }\r\n    renderMessages()\r\n    if(!chat) return 'Loading...';\r\n    return(\r\n        <div className=\"chat-feed\">\r\n            <div className=\"chat-title-container\">\r\n                <div className=\"chat-title\">\r\n                    {chat?.title}\r\n                </div>\r\n                <div className=\"chat-subtitle\">\r\n                    {chat.people.map((person)=> ` ${person.person.username}`)}\r\n                </div>\r\n            </div>\r\n            {renderMessages()}\r\n            <div style={{height: '100px'}} />\r\n            <div className=\"message-form-container\">\r\n                <MessageForm{... props} chatId={activeChat}/>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatFeed;","import {useState} from 'react';\r\nimport axios from 'axios';\r\n\r\nconst LoginForm = () => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [error, setError] = useState('');\r\n\r\nconst handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const authObject = { 'Project-ID': \"6c6547c9-e783-40ef-8ae7-7b6c0f5563c5\", 'User-Name': username, 'User-Secret': password};\r\n    try{\r\n        await axios.get('https://api.chatengine.io/chats', {headers: authObject});\r\n        localStorage.setItem('username', username);\r\n        localStorage.setItem('password', password);\r\n        window.location.reload();\r\n    } catch (error) {\r\n        setError('Incorrect Credentials.')\r\n    }\r\n}\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"form\">\r\n                <h1 className=\"title\">Chat Application</h1>\r\n                <form onSubmit={handleSubmit}>\r\n                    <input type='text' value={username} onChange={(e)=> setUsername(e.target.value)} className=\"input\" placeholder=\"Username\" required/>\r\n                    <input type='password' value={password} onChange={(e)=> setPassword(e.target.value)} className=\"input\" placeholder=\"Password\" required/>\r\n                    <div align=\"center\">\r\n                        <button type=\"submit\" className=\"button\">\r\n                            <span>Start Chatting</span>\r\n                        </button>\r\n                    </div>\r\n                    <h2 className=\"error\">{error}</h2>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginForm;","import { ChatEngine } from 'react-chat-engine';\r\nimport ChatFeed from './components/ChatFeed';\r\nimport LoginForm from './components/LoginForm';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n    if(!localStorage.getItem('username')) return <LoginForm />\r\n    return(\r\n        <ChatEngine \r\n            height=\"100vh\"\r\n            projectID=\"6c6547c9-e783-40ef-8ae7-7b6c0f5563c5\"\r\n            userName={localStorage.getItem('username')}\r\n            userSecret={localStorage.getItem('password')}\r\n            renderChatFeed={(chatAppProps)=> <ChatFeed {...chatAppProps}/>}\r\n        />\r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}